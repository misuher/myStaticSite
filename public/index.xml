<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Misublog</title>
    <link>localhost/blog/</link>
    <description>Recent content on Misublog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Sat, 10 Oct 2015 16:56:43 +0200</lastBuildDate>
    <atom:link href="localhost/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introducing Icarus and it&#39;s features</title>
      <link>/localhost/blog/2015/10/10/introducing-icarus-and-its-features</link>
      <pubDate>Sat, 10 Oct 2015 16:56:43 +0200</pubDate>
      
      <guid>/localhost/blog/2015/10/10/introducing-icarus-and-its-features</guid>
      <description>

&lt;p&gt;Icarus is a responsive and customizable theme for bloggers. It&amp;rsquo;s a port of the same-named theme for &lt;a href=&#34;//hexo.io&#34;&gt;Hexo&lt;/a&gt; made by &lt;a href=&#34;https://github.com/ppoffice&#34;&gt;Ruipeng Zhang&lt;/a&gt;. Noteworthy features of this Hugo theme are the integration of a comment-system powered by Disqus, localization (l10n) support, syntax highlighting for source code, optional widgets for the sidebar and a handful &lt;a href=&#34;http://gohugo.io/extras/shortcodes/&#34;&gt;shortcodes&lt;/a&gt; to make your life easier.&lt;/p&gt;

&lt;h2 id=&#34;get-the-theme:33ea911532f0c95309659f2412cd62cb&#34;&gt;Get the theme&lt;/h2&gt;

&lt;p&gt;I assume you&amp;rsquo;ve Git installed. Inside the folder of your Hugo site run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir themes
$ cd themes
$ git clone git@github.com:digitalcraftsman/hugo-icarus-theme.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a folder called &lt;code&gt;hugo-icarus-theme&lt;/code&gt; inside the &lt;code&gt;themes&lt;/code&gt; directory, that we created a few moments ago. For more information read the official &lt;a href=&#34;https://gohugo.io/overview/installing/&#34;&gt;setup guide&lt;/a&gt; of Hugo.&lt;/p&gt;

&lt;h2 id=&#34;setup:33ea911532f0c95309659f2412cd62cb&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;In the next step navigate to the &lt;code&gt;exampleSite&lt;/code&gt; folder at &lt;code&gt;themes/hugo-icarus-theme/exampleSite/&lt;/code&gt;. It&amp;rsquo;s structure shoud look similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exampleSite
├── config.toml
├── content
│   └── post
│       ├── creating-a-new-theme.md
│       ├── go-is-for-lovers.md
│       ├── hugo-is-for-lovers.md
│       ├── introducing-icarus-and-its-features.md
│       ├── linked-post.md
│       └── migrate-from-jekyll.md
├── data
│   └── l10n.toml
└── static
    └── banners
        └── placeholder.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to get your site running, you need to copy &lt;code&gt;config.toml&lt;/code&gt; and &lt;code&gt;data/l10n.toml&lt;/code&gt; into the root folders.&lt;/p&gt;

&lt;h2 id=&#34;the-config-file:33ea911532f0c95309659f2412cd62cb&#34;&gt;The config file&lt;/h2&gt;

&lt;p&gt;Now, let us take a look into the &lt;code&gt;config.toml&lt;/code&gt;. Feel free to play around with the settings.&lt;/p&gt;

&lt;h3 id=&#34;comments:33ea911532f0c95309659f2412cd62cb&#34;&gt;Comments&lt;/h3&gt;

&lt;p&gt;The opional comment system is powered by Disqus. Enter your shortname to enable the comment section under your posts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;disqusShortname = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;menu:33ea911532f0c95309659f2412cd62cb&#34;&gt;Menu&lt;/h3&gt;

&lt;p&gt;You can also define the items menu entries as you like. First, let us link a post that you&amp;rsquo;ve written. We can do this in the frontmatter of the post&amp;rsquo;s content file by setting &lt;code&gt;menu&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt;. Take a look at the menu if you want to see a live example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
menu = &amp;quot;main&amp;quot;
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Furthermore, we can add entries that don&amp;rsquo;t link to posts. Back in the &lt;code&gt;config.toml&lt;/code&gt; you&amp;rsquo;ll find a section for the menus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[params.menu]]
    before = true
    label  = &amp;quot;Home&amp;quot;
    link   = &amp;quot;/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Define a label and enter the URL to resource you want to link. With &lt;code&gt;before&lt;/code&gt; you can decide wether the link should appear before &lt;strong&gt;or&lt;/strong&gt; after all linked posts in the menu. &lt;code&gt;Home&lt;/code&gt; appears before the linked post, &lt;code&gt;Tags&lt;/code&gt; and &lt;code&gt;Categories&lt;/code&gt; after them (as in the menu above).&lt;/p&gt;

&lt;h3 id=&#34;tell-me-who-you-re:33ea911532f0c95309659f2412cd62cb&#34;&gt;Tell me who you&amp;rsquo;re&lt;/h3&gt;

&lt;p&gt;Maybe you noticed the profile section on the left. Add your social network accounts to the profile section on the left by entering your username under &lt;code&gt;social&lt;/code&gt;. The links to your account will be create automatically.&lt;/p&gt;

&lt;h3 id=&#34;widgets:33ea911532f0c95309659f2412cd62cb&#34;&gt;Widgets&lt;/h3&gt;

&lt;p&gt;On the right, you can see some useful widgets that you can activate as you like. You can deactivate them under &lt;code&gt;params.widgets&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[params.widgets]
    recent_articles = false
    categories = true
    tags = true
    tag_cloud = true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;localization-l10n:33ea911532f0c95309659f2412cd62cb&#34;&gt;Localization (l10n)&lt;/h2&gt;

&lt;p&gt;You don&amp;rsquo;t blog in english and you want to translate the theme into your native locale? No problem. Take a look in the &lt;code&gt;data&lt;/code&gt; folder and you&amp;rsquo;ll find a file &lt;code&gt;l10n.toml&lt;/code&gt; that we&amp;rsquo;ve copied at the beginning. It contains all strings related to the theme. Just replace the original strings with your own.&lt;/p&gt;

&lt;h2 id=&#34;linking-thumbnails:33ea911532f0c95309659f2412cd62cb&#34;&gt;Linking thumbnails&lt;/h2&gt;

&lt;p&gt;After creating a new post you can define a banner by entering the relative path to the image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;banner = &amp;quot;banners/placeholder.png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way you can store them either next to the content file or in the &lt;code&gt;static&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2 id=&#34;mathematical-equations:33ea911532f0c95309659f2412cd62cb&#34;&gt;Mathematical equations&lt;/h2&gt;

&lt;p&gt;In case you need to display equations you can insert your Latex or MathML code and it works out of the box thanks to &lt;a href=&#34;https://www.mathjax.org&#34;&gt;MathJax&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\[ z = r \cdot (\sin{\phi} + \cos{\phi} \cdot i) \]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[ z = r \cdot (\sin{\phi} + \cos{\phi} \cdot i) ]&lt;/p&gt;

&lt;h2 id=&#34;shortcodes:33ea911532f0c95309659f2412cd62cb&#34;&gt;Shortcodes&lt;/h2&gt;

&lt;p&gt;Last but not least I included some useful &lt;a href=&#34;http://gohugo.io/extras/shortcodes/&#34;&gt;shortcodes&lt;/a&gt; to make your like easier.&lt;/p&gt;

&lt;h3 id=&#34;gallery:33ea911532f0c95309659f2412cd62cb&#34;&gt;Gallery&lt;/h3&gt;

&lt;p&gt;This way you can include a gallery into your post. Copy the code below into your content file and enter the relative paths to your images.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;lt; gallery
    &amp;quot;/banners/placeholder.png&amp;quot;
    &amp;quot;/banners/placeholder.png&amp;quot;
    &amp;quot;/banners/placeholder.png&amp;quot;
&amp;gt; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note: In order to prevent the execution of the shortcodes I added a space between &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; at the beginning and the end of the shortcode. Revert this after copying.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;article-gallery&#34;&gt;
    &lt;div class=&#34;article-gallery-photos&#34;&gt;
        
        &lt;a class=&#34;article-gallery-img fancybox&#34; href=&#34;localhost/blog/banners/placeholder.png&#34; rel=&#34;group1&#34;&gt;
            &lt;img src=&#34;localhost/blog/banners/placeholder.png&#34; itemprop=&#34;image&#34;&gt;
        &lt;/a&gt;
        
        &lt;a class=&#34;article-gallery-img fancybox&#34; href=&#34;localhost/blog/banners/placeholder.png&#34; rel=&#34;group1&#34;&gt;
            &lt;img src=&#34;localhost/blog/banners/placeholder.png&#34; itemprop=&#34;image&#34;&gt;
        &lt;/a&gt;
        
        &lt;a class=&#34;article-gallery-img fancybox&#34; href=&#34;localhost/blog/banners/placeholder.png&#34; rel=&#34;group1&#34;&gt;
            &lt;img src=&#34;localhost/blog/banners/placeholder.png&#34; itemprop=&#34;image&#34;&gt;
        &lt;/a&gt;
        
    &lt;/div&gt;
&lt;/div&gt;


&lt;h3 id=&#34;github-gists:33ea911532f0c95309659f2412cd62cb&#34;&gt;Github Gists&lt;/h3&gt;

&lt;p&gt;Enter the id of your gist and you&amp;rsquo;re ready to go.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;lt;  gist &amp;quot;85f59771b5ae1e2091a8&amp;quot; &amp;gt; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note, that this only works with public gists since authentification is not supported.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/85f59771b5ae1e2091a8/

&lt;h3 id=&#34;jsfidde:33ea911532f0c95309659f2412cd62cb&#34;&gt;JSFidde&lt;/h3&gt;

&lt;p&gt;It works the same with JSFiddle examples you want to showcase. The parameter &lt;code&gt;id&lt;/code&gt; consists of the username and id of the example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;lt; jsfiddle id=&amp;quot;zalun/NmudS&amp;quot; &amp;gt; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;iframe
  style=&#34;width: 100%; height: auto;&#34; frameBorder=&#34;0&#34; allowfullscreen=&#34;allowfullscreen&#34;
  src=&#34;https://jsfiddle.net/zalun/NmudS/embedded/&#34;&gt;
&lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;


&lt;p&gt;As descibed in the &lt;a href=&#34;http://doc.jsfiddle.net/use/embedding.html&#34;&gt;docs of JSFiddle&lt;/a&gt;, you can define which tabs will be shown. Enter the tabs you want to see separated by a comma in the &lt;code&gt;tabs&lt;/code&gt; parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;lt; jsfiddle id=&amp;quot;zalun/NmudS&amp;quot; tabs=&amp;quot;html,result&amp;quot; &amp;gt; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do you see the difference?&lt;/p&gt;

&lt;iframe
  style=&#34;width: 100%; height: auto;&#34; frameBorder=&#34;0&#34; allowfullscreen=&#34;allowfullscreen&#34;
  src=&#34;https://jsfiddle.net/zalun/NmudS/embedded/html,result/&#34;&gt;
&lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;


&lt;h3 id=&#34;vimeo-and-youtube:33ea911532f0c95309659f2412cd62cb&#34;&gt;Vimeo and Youtube&lt;/h3&gt;

&lt;p&gt;The embedding of videos from Vimeo and Youtube is also supported.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;lt; youtube &amp;quot;w7Ft2ymGmfc&amp;quot; &amp;gt; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/w7Ft2ymGmfc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;pre&gt;&lt;code&gt;{{ &amp;lt; vimeo &amp;quot;137643804&amp;quot; &amp;gt; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//player.vimeo.com/video/137643804&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
 &lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;nearly-finished:33ea911532f0c95309659f2412cd62cb&#34;&gt;Nearly finished&lt;/h2&gt;

&lt;p&gt;In order to see your site in action, run Hugo&amp;rsquo;s built-in local server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now enter &lt;a href=&#34;//localhost:1313&#34;&gt;&lt;code&gt;localhost:1313&lt;/code&gt;&lt;/a&gt; in the address bar of your browser.&lt;/p&gt;

&lt;h2 id=&#34;contributing:33ea911532f0c95309659f2412cd62cb&#34;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;Did you found a bug or got an idea for a new feature? Feel free to use the &lt;a href=&#34;//github.com/digitalcraftsman/hugo-icarus-theme/issues&#34;&gt;issue tracker&lt;/a&gt; to let me know. Or make directly a &lt;a href=&#34;//github.com/digitalcraftsman/hugo-icarus-theme/pulls&#34;&gt;pull request&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;license:33ea911532f0c95309659f2412cd62cb&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;This theme is released under the MIT license. For more information read the &lt;a href=&#34;https://github.com/digitalcraftsman/hugo-icarus-theme/blob/master/LICENSE.md&#34;&gt;License&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;annotations:33ea911532f0c95309659f2412cd62cb&#34;&gt;Annotations&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;//github.com/spf13&#34;&gt;Steve Francia&lt;/a&gt; for creating Hugo and the awesome community around the project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrate from Jekyll</title>
      <link>/localhost/blog/2015/10/10/migrate-from-jekyll</link>
      <pubDate>Sat, 10 Oct 2015 13:07:31 +0200</pubDate>
      
      <guid>/localhost/blog/2015/10/10/migrate-from-jekyll</guid>
      <description>

&lt;h2 id=&#34;move-static-content-to-static:964c172ef5e837f03573891408d8d631&#34;&gt;Move static content to &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ static/
        ▾ images/
            logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code&gt;CNAME&lt;/code&gt;) to be moved to &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-your-hugo-configuration-file:964c172ef5e837f03573891408d8d631&#34;&gt;Create your Hugo configuration file&lt;/h2&gt;

&lt;p&gt;Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a href=&#34;localhost/blog/overview/configuration/&#34;&gt;Hugo configuration documentation&lt;/a&gt; for details.&lt;/p&gt;

&lt;h2 id=&#34;set-your-configuration-publish-folder-to-site:964c172ef5e837f03573891408d8d631&#34;&gt;Set your configuration publish folder to &lt;code&gt;_site&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The default is for Jekyll to publish to &lt;code&gt;_site&lt;/code&gt; and for Hugo to publish to &lt;code&gt;public&lt;/code&gt;. If, like me, you have &lt;a href=&#34;http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html&#34;&gt;&lt;code&gt;_site&lt;/code&gt; mapped to a git submodule on the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/a&gt;, you&amp;rsquo;ll want to do one of two alternatives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change your submodule to point to map &lt;code&gt;gh-pages&lt;/code&gt; to public instead of &lt;code&gt;_site&lt;/code&gt; (recommended).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule deinit _site
git rm _site
git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Or, change the Hugo configuration to use &lt;code&gt;_site&lt;/code&gt; instead of &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    ..
    &amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;,
    ..
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;convert-jekyll-templates-to-hugo-templates:964c172ef5e837f03573891408d8d631&#34;&gt;Convert Jekyll templates to Hugo templates&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to &lt;a href=&#34;http://jekyllrb.com/docs/templates/&#34;&gt;Jekyll&amp;rsquo;s template documentation&lt;/a&gt; if you need to refresh your memory on how you built your blog and &lt;a href=&#34;localhost/blog/layout/templates/&#34;&gt;Hugo&amp;rsquo;s template&lt;/a&gt; to learn Hugo&amp;rsquo;s way.&lt;/p&gt;

&lt;p&gt;As a single reference data point, converting my templates for &lt;a href=&#34;http://heyitsalex.net/&#34;&gt;heyitsalex.net&lt;/a&gt; took me no more than a few hours.&lt;/p&gt;

&lt;h2 id=&#34;convert-jekyll-plugins-to-hugo-shortcodes:964c172ef5e837f03573891408d8d631&#34;&gt;Convert Jekyll plugins to Hugo shortcodes&lt;/h2&gt;

&lt;p&gt;Jekyll has &lt;a href=&#34;http://jekyllrb.com/docs/plugins/&#34;&gt;plugins&lt;/a&gt;; Hugo has &lt;a href=&#34;localhost/blog/doc/shortcodes/&#34;&gt;shortcodes&lt;/a&gt;. It&amp;rsquo;s fairly trivial to do a port.&lt;/p&gt;

&lt;h3 id=&#34;implementation:964c172ef5e837f03573891408d8d631&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;As an example, I was using a custom &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb&#34;&gt;&lt;code&gt;image_tag&lt;/code&gt;&lt;/a&gt; plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p&gt;

&lt;p&gt;Jekyll&amp;rsquo;s plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Jekyll
  class ImageTag &amp;lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &amp;quot;&amp;lt;figure class=&#39;#{@class}&#39;&amp;gt;&amp;quot;
      else
        source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
      end
      if @link
        source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
      if @link
        source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
      source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
      source
    end
  end
end
Liquid::Template.register_tag(&#39;image&#39;, Jekyll::ImageTag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is written as this Hugo shortcode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
    {{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
        &amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
    {{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
    {{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
    &amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
        {{ .Get &amp;quot;title&amp;quot; }}{{ end }}
        {{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
        {{ .Get &amp;quot;caption&amp;quot; }}
        {{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
            {{ .Get &amp;quot;attr&amp;quot; }}
        {{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
        &amp;lt;/p&amp;gt; {{ end }}
    &amp;lt;/figcaption&amp;gt;
    {{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage:964c172ef5e837f03573891408d8d631&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;I simply changed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this (this example uses a slightly extended version named &lt;code&gt;fig&lt;/code&gt;, different than the built-in &lt;code&gt;figure&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a bonus, the shortcode named parameters are, arguably, more readable.&lt;/p&gt;

&lt;h2 id=&#34;finishing-touches:964c172ef5e837f03573891408d8d631&#34;&gt;Finishing touches&lt;/h2&gt;

&lt;h3 id=&#34;fix-content:964c172ef5e837f03573891408d8d631&#34;&gt;Fix content&lt;/h3&gt;

&lt;p&gt;Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code&gt;hugo server --watch&lt;/code&gt; is your friend. Test your changes and fix errors as needed.&lt;/p&gt;

&lt;h3 id=&#34;clean-up:964c172ef5e837f03573891408d8d631&#34;&gt;Clean up&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&amp;rsquo;t used, delete it.&lt;/p&gt;

&lt;h2 id=&#34;a-practical-example-in-a-diff:964c172ef5e837f03573891408d8d631&#34;&gt;A practical example in a diff&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://heyitsalex.net/&#34;&gt;Hey, it&amp;rsquo;s Alex&lt;/a&gt; was migrated in less than a &lt;em&gt;father-with-kids day&lt;/em&gt; from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610&#34;&gt;diff&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linked post</title>
      <link>/localhost/blog/2015/10/02/linked-post</link>
      <pubDate>Fri, 02 Oct 2015 21:49:20 +0200</pubDate>
      
      <guid>/localhost/blog/2015/10/02/linked-post</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a linked post in the menu. You can add other posts by adding the following line to the frontmatter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;menu = &amp;quot;main&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. In mauris nulla, vestibulum vel auctor sed, posuere eu lorem. Aliquam consequat augue ut accumsan mollis. Suspendisse malesuada sodales tincidunt. Vivamus sed erat ac augue bibendum porta sed id ipsum. Ut mollis mauris eget ligula sagittis cursus. Aliquam id pharetra tellus. Pellentesque sed tempus risus. Proin id hendrerit ante. Vestibulum vitae urna ut mauris ultricies dignissim. Ut ante turpis, tristique vitae sagittis quis, sagittis nec diam. Fusce pulvinar cursus porta. Vivamus maximus leo dolor, ut pellentesque lorem fringilla nec. Mauris faucibus turpis posuere sapien euismod, a ullamcorper mi maximus.&lt;/p&gt;

&lt;p&gt;Morbi varius ex vel justo dictum placerat. Sed ac arcu pretium, varius elit eget, gravida purus. Fusce sit amet massa mollis eros tincidunt sollicitudin. Suspendisse iaculis cursus mauris ut sagittis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Maecenas elit ligula, molestie quis magna eu, semper posuere lorem. Mauris a justo pharetra, congue ex eget, tincidunt massa. Maecenas sit amet neque lorem.&lt;/p&gt;

&lt;p&gt;Curabitur at elementum quam. Curabitur tristique elit non sapien aliquam vulputate. Vivamus in odio tincidunt, tempor sem quis, tincidunt lacus. Mauris pulvinar nunc sed tempus dictum. Nam vel arcu quis mi fermentum ullamcorper non ac lacus. Donec aliquet vitae ante at imperdiet. Aenean scelerisque venenatis urna, eget elementum risus convallis ac. Nullam gravida arcu lacus, non consectetur augue pretium non. Duis dignissim eros id urna pretium congue. Nullam eu magna in sem sollicitudin tempor. Pellentesque vel convallis ligula. Quisque semper, turpis a rhoncus efficitur, magna nibh iaculis elit, eget tempor dolor eros ut mi. Maecenas eu placerat lacus. Praesent congue pretium nulla, sed suscipit metus rutrum vel.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go is for lovers</title>
      <link>/localhost/blog/2015/09/17/go-is-for-lovers</link>
      <pubDate>Thu, 17 Sep 2015 13:47:08 +0200</pubDate>
      
      <guid>/localhost/blog/2015/09/17/go-is-for-lovers</guid>
      <description>

&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;http://golang.org/&amp;gt;&#34;&gt;go&lt;/a&gt; &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in go templates.&lt;/p&gt;

&lt;p&gt;This document is a brief primer on using go templates. The &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;go docs&lt;/a&gt;
provide more details.&lt;/p&gt;

&lt;h2 id=&#34;introduction-to-go-templates:08cfabf6312c9fe10477f4bc9e27bdd5&#34;&gt;Introduction to Go Templates&lt;/h2&gt;

&lt;p&gt;Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that go templates parse very quickly.&lt;/p&gt;

&lt;p&gt;A unique characteristic of go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;go docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;basic-syntax:08cfabf6312c9fe10477f4bc9e27bdd5&#34;&gt;Basic Syntax&lt;/h2&gt;

&lt;p&gt;Go lang templates are html files with the addition of variables and
functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go variables and functions are accessible within {{ }}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ foo }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parameters are separated using spaces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calling the add function with input of 1, 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Methods and fields are accessed via dot notation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing the Page Parameter &amp;ldquo;bar&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Params.bar }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parentheses can be used to group items together&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variables:08cfabf6312c9fe10477f4bc9e27bdd5&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;Each go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a href=&#34;localhost/blog/layout/variables&#34;&gt;variables&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;A variable is accessed by referencing the variable name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables can also be defined and referenced.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions:08cfabf6312c9fe10477f4bc9e27bdd5&#34;&gt;Functions&lt;/h2&gt;

&lt;p&gt;Go template ship with a few functions which provide basic functionality. The go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a href=&#34;localhost/blog/layout/functions&#34;&gt;Hugo template
functions&lt;/a&gt; provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;includes:08cfabf6312c9fe10477f4bc9e27bdd5&#34;&gt;Includes&lt;/h2&gt;

&lt;p&gt;When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;logic:08cfabf6312c9fe10477f4bc9e27bdd5&#34;&gt;Logic&lt;/h2&gt;

&lt;p&gt;Go templates provide the most basic iteration and conditional logic.&lt;/p&gt;

&lt;h3 id=&#34;iteration:08cfabf6312c9fe10477f4bc9e27bdd5&#34;&gt;Iteration&lt;/h3&gt;

&lt;p&gt;Just like in go, the go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1: Using Context&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }}
    {{ . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $element := array}}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring key and value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conditionals:08cfabf6312c9fe10477f4bc9e27bdd5&#34;&gt;Conditionals&lt;/h3&gt;

&lt;p&gt;If, else, with, or, &amp;amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go Templates treat the following values as false:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;any array, slice, map, or string of length zero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 1: If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: If -&amp;gt; Else&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 3: And &amp;amp; Or&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 4: With&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An alternative way of writing &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent.&lt;/p&gt;

&lt;p&gt;The first example above could be simplified as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 5: If -&amp;gt; Else If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pipes:08cfabf6312c9fe10477f4bc9e27bdd5&#34;&gt;Pipes&lt;/h2&gt;

&lt;p&gt;One of the most powerful components of go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&amp;rsquo;s output becomes the
input of the following pipe.&lt;/p&gt;

&lt;p&gt;Because of the very simple syntax of go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p&gt;

&lt;p&gt;A few simple examples should help convey how to use the pipe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if eq 1 1 }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is the same as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ eq 1 1 | if }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 3 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Could be rewritten as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{  isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;context-aka-the-dot:08cfabf6312c9fe10477f4bc9e27bdd5&#34;&gt;Context (aka. the dot)&lt;/h2&gt;

&lt;p&gt;The most easily overlooked concept to understand about go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p&gt;

&lt;h1 id=&#34;hugo-parameters:08cfabf6312c9fe10477f4bc9e27bdd5&#34;&gt;Hugo Parameters&lt;/h1&gt;

&lt;p&gt;Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p&gt;

&lt;h2 id=&#34;using-content-page-parameters:08cfabf6312c9fe10477f4bc9e27bdd5&#34;&gt;Using Content (page) Parameters&lt;/h2&gt;

&lt;p&gt;In each piece of content you can provide variables to be used by the
templates. This happens in the &lt;a href=&#34;localhost/blog/content/front-matter&#34;&gt;front matter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&amp;rsquo;t make a lot of sense. We&amp;rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p&gt;

&lt;p&gt;Here is the example front matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Permalinks&amp;quot;
date: &amp;quot;2013-11-18&amp;quot;
aliases:
  - &amp;quot;/doc/permalinks/&amp;quot;
groups: [&amp;quot;extras&amp;quot;]
groups_weight: 30
notoc: true
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the corresponding code inside of the template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ if not .Params.notoc }}
    &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
    {{ .TableOfContents }}
    &amp;lt;/div&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-site-config-parameters:08cfabf6312c9fe10477f4bc9e27bdd5&#34;&gt;Using Site (config) Parameters&lt;/h2&gt;

&lt;p&gt;In your top-level configuration file (eg, &lt;code&gt;config.yaml&lt;/code&gt;) you can define site
parameters, which are values which will be available to you in chrome.&lt;/p&gt;

&lt;p&gt;For instance, you might declare:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;params:
  CopyrightHTML: &amp;quot;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;quot;
  TwitterUser: &amp;quot;spf13&amp;quot;
  SidebarRecentLimit: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within a footer layout, you might then declare a &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; which is only
provided if the &lt;code&gt;CopyrightHTML&lt;/code&gt; parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An alternative way of writing the &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.}}&amp;quot;
 alt=&amp;quot;Twitter&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do
so, such as in this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;nav class=&amp;quot;recent&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
  &amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.RelPermalink}}&amp;quot;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  {{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>6.Includes</title>
      <link>/localhost/blog/2015/08/06/6.includes</link>
      <pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/localhost/blog/2015/08/06/6.includes</guid>
      <description>&lt;p&gt;Angular tiene su propia forma de hacer html reusable incluyendo el html de un archivo dentro de otro&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/01/1.directivas&#34;&gt;1. Directivas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/02/2.expresiones&#34;&gt;2. Expresiones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/03/3.controladores&#34;&gt;3. Controladores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/04/4.filtros&#34;&gt;4. Filtros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/05/5.usandoexternaldata&#34;&gt;5. Usando datos de otro servidor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/06/6.includes&#34;&gt;6. Includes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;para ellos se usa una directiva que no mencioné en el capitulo 1, es &lt;code&gt;ng-include&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Con ella podemos definir por ejemplo un formulario y una lista genéricos y llamarlos en nuestro index:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;div ng-include=&amp;quot;&#39;Lista.htm&#39;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div ng-include=&amp;quot;&#39;Formulario.htm&#39;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>5.UsandoExternalData</title>
      <link>/localhost/blog/2015/08/05/5.usandoexternaldata</link>
      <pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/localhost/blog/2015/08/05/5.usandoexternaldata</guid>
      <description>&lt;p&gt;Digamos que en www.ejemplo.com/json nos mandan un objeto de datos JSON que queremos usar en nuestra página&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/01/1.directivas&#34;&gt;1. Directivas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/02/2.expresiones&#34;&gt;2. Expresiones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/03/3.controladores&#34;&gt;3. Controladores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/04/4.filtros&#34;&gt;4. Filtros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/05/5.usandoexternaldata&#34;&gt;5. Usando datos de otro servidor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/06/6.includes&#34;&gt;6. Includes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El JSON que nos dan tiene la siguiente forma:
    {
        &amp;ldquo;registro&amp;rdquo;:[
            {
                    &amp;ldquo;nombre&amp;rdquo;: &amp;ldquo;perico&amp;rdquo;,
                    &amp;ldquo;ciudad&amp;rdquo;: &amp;ldquo;Berlin&amp;rdquo;,
                    &amp;ldquo;pais&amp;rdquo;: &amp;ldquo;Alemania&amp;rdquo;
            },
            {
                    &amp;ldquo;nombre&amp;rdquo;: &amp;ldquo;palotes&amp;rdquo;,
                    &amp;ldquo;ciudad&amp;rdquo;: &amp;ldquo;Paris&amp;rdquo;,
                    &amp;ldquo;pais&amp;rdquo;: &amp;ldquo;Francia&amp;rdquo;
            }
        ]
    }&lt;/p&gt;

&lt;p&gt;Para leer los datos usaremos en el controlador el servicio $http que hace una llamada AJAX para pedirlos:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div ng-app=&amp;quot;myApp&amp;quot; ng-controller=&amp;quot;myCtrl&amp;quot;&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;li ng-repeat=&amp;quot;x in campos&amp;quot;&amp;gt;
        {{ x.nombre + &#39;, &#39; + x.ciudad }}
      &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
var app = angular.module(&#39;myApp&#39;, []);
app.controller(&#39;myCtrl&#39;, function($scope, $http) {
    $http.get(&amp;quot;http://www.ejemplo.com/json&amp;quot;)
    .success(function(response) {$scope.campos = response.registro;});
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>4.Filtros</title>
      <link>/localhost/blog/2015/08/04/4.filtros</link>
      <pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/localhost/blog/2015/08/04/4.filtros</guid>
      <description>&lt;p&gt;Los filtros sirven para transformar, ordenar o seleccionar subconjuntos entre los datos de la aplicación&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/01/1.directivas&#34;&gt;1. Directivas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/02/2.expresiones&#34;&gt;2. Expresiones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/03/3.controladores&#34;&gt;3. Controladores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/04/4.filtros&#34;&gt;4. Filtros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/05/5.usandoexternaldata&#34;&gt;5. Usando datos de otro servidor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/06/6.includes&#34;&gt;6. Includes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los filtros se definen dentro de una expresión  separándola con el símbolo | y a continuación indicando el tipo de filtro.
Los tipos de filtros son:
* lowercase/uppercase
* currency (formatea números a un formato de moneda)
* orderBy
* filter&lt;/p&gt;

&lt;p&gt;Como siempre damos ejemplos representativos de ellos en orden:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div ng-app=&amp;quot;myApp&amp;quot; ng-init=&amp;quot;name=&#39;Jonh&#39;; Persons=[
{nombre:&#39;pedro&#39;, pais=&#39;portugal&#39;},
{nombre:&#39;Jesú&#39;, pais=&#39;españa&#39;}]&amp;quot;&amp;gt;

    &amp;lt;p&amp;gt;{{name | uppercase}}&amp;lt;/p&amp;gt;

    &amp;lt;input type=&amp;quot;number&amp;quot; ng-model=&amp;quot;quantity&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;{{quantity | currency}}&amp;lt;/p&amp;gt;

    &amp;lt;ul&amp;gt;
        &amp;lt;li ng-repeat=&amp;quot;x in Persons | orderBy:&#39;pais&#39;&amp;quot;&amp;gt;
            {{x.nombre+&#39;, &#39;+ x.pais}}
        &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;

    &amp;lt;p&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;criterioDelFiltro&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;li ng-repeat=&amp;quot;x in Persons | filter:criterioDelFiltro | orderBy:&#39;nombre&#39;&amp;quot;&amp;gt;
        {{ (x.nombre | uppercase) + &#39;, &#39; + x.pais }}
      &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hugo is for lovers</title>
      <link>/localhost/blog/2015/08/03/hugo-is-for-lovers</link>
      <pubDate>Mon, 03 Aug 2015 13:39:46 +0200</pubDate>
      
      <guid>/localhost/blog/2015/08/03/hugo-is-for-lovers</guid>
      <description>

&lt;h2 id=&#34;step-1-install-hugo:88aac7a07addfbee771d05b85cb8c827&#34;&gt;Step 1. Install Hugo&lt;/h2&gt;

&lt;p&gt;Goto &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;hugo releases&lt;/a&gt; and download the
appropriate version for your os and architecture.&lt;/p&gt;

&lt;p&gt;Save it somewhere specific as we will be using it in the next step.&lt;/p&gt;

&lt;p&gt;More complete instructions are available at &lt;a href=&#34;localhost/blog/overview/installing/&#34;&gt;installing hugo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-2-build-the-docs:88aac7a07addfbee771d05b85cb8c827&#34;&gt;Step 2. Build the Docs&lt;/h2&gt;

&lt;p&gt;Hugo has its own example site which happens to also be the documentation site
you are reading right now.&lt;/p&gt;

&lt;p&gt;Follow the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone the &lt;a href=&#34;http://github.com/spf13/hugo&#34;&gt;hugo repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go into the repo&lt;/li&gt;
&lt;li&gt;Run hugo in server mode and build the docs&lt;/li&gt;
&lt;li&gt;Open your browser to &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Corresponding pseudo commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;rsquo;ve gotten here, follow along the rest of this page on your local build.&lt;/p&gt;

&lt;h2 id=&#34;step-3-change-the-docs-site:88aac7a07addfbee771d05b85cb8c827&#34;&gt;Step 3. Change the docs site&lt;/h2&gt;

&lt;p&gt;Stop the Hugo process by hitting ctrl+c.&lt;/p&gt;

&lt;p&gt;Now we are going to run hugo again, but this time with hugo in watch mode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open your &lt;a href=&#34;http://vim.spf13.com&#34;&gt;favorite editor&lt;/a&gt; and change one of the source
content pages. How about changing this very file to &lt;em&gt;fix the typo&lt;/em&gt;. How about changing this very file to &lt;em&gt;fix the typo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Content files are found in &lt;code&gt;docs/content/&lt;/code&gt;. Unless otherwise specified, files
are located at the same relative location as the url, in our case
&lt;code&gt;docs/content/overview/quickstart.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Change and save this file.. Notice what happened in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Change detected, rebuilding site

&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 26 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refresh the browser and observe that the typo is now fixed.&lt;/p&gt;

&lt;p&gt;Notice how quick that was. Try to refresh the site before it&amp;rsquo;s finished building.. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.&lt;/p&gt;

&lt;h2 id=&#34;step-4-have-fun:88aac7a07addfbee771d05b85cb8c827&#34;&gt;Step 4. Have fun&lt;/h2&gt;

&lt;p&gt;The best way to learn something is to play with it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3.Controladores</title>
      <link>/localhost/blog/2015/08/03/3.controladores</link>
      <pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/localhost/blog/2015/08/03/3.controladores</guid>
      <description>&lt;p&gt;Los controladores sirven para manejar los datos de la aplicación AngularJS&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/01/1.directivas&#34;&gt;1. Directivas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/02/2.expresiones&#34;&gt;2. Expresiones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/03/3.controladores&#34;&gt;3. Controladores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/04/4.filtros&#34;&gt;4. Filtros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/05/5.usandoexternaldata&#34;&gt;5. Usando datos de otro servidor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/06/6.includes&#34;&gt;6. Includes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El controlador recupera los datos de la aplicación y los modifica. Para recuperar los variables de la aplicación, AngularJS define la aplicación como un objeto $scope bajo el cual se definen las variables(creandolas con ng-init o ng-model). Así si queremos modificar una variable desde nuestro controlador se hará de la forma:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.myvar = 5;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vemos a continuación un ejemplo completo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div ng-app=&amp;quot;myApp&amp;quot; ng-controler=&amp;quot;myCtrl&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;myVar1&amp;quot;&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;input type=&amp;quot;number&amp;quot; ng-model=&amp;quot;myvar2&amp;quot;&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;br&amp;gt;
    Has introducido: {{myvar1 + &amp;quot; y &amp;quot; +myvar2}}
&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
    var app = angular.module(&#39;myApp&#39;, []); //en el array van modulos del que esta app tiene Dependencias
    app.controler(&#39;myCtrl&#39;, function($scope){
        $scope.myvar1 = &amp;quot;valor inicial&amp;quot;;
        $scope.myvar2 = 7;
    });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como la aplicación es un objeto no solo se puedes extender las variables de su prototipo sino también los métodos:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div ng-app=&amp;quot;myApp&amp;quot; ng-controler=&amp;quot;myCtrl&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;myvar1&amp;quot;&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;input type=&amp;quot;number&amp;quot; ng-model=&amp;quot;myvar2&amp;quot;&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;br&amp;gt;
    Has introducido: {{myFunc()}}
&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
    var app = angular.module(&#39;myApp&#39;, []); //en el array van modulos del que esta app tiene Dependencias
    app.controler(&#39;myCtrl&#39;, function($scope){
        $scope.myFunc = function(){
            return $scope.myvar1 + &amp;quot; y &amp;quot; + $scope.myvar2;
        }
    });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En la filosofía de AngularJS se dicta que el código debe ser reutilizable, es decir, podemos usar un controlador para varias apps, por eso lo más normal es definir el controlador en un archivo externo e importarlo en la aplicación donde se llame:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//index.html
&amp;lt;div ng-app=&amp;quot;myApp&amp;quot; ng-controler=&amp;quot;myCtrl&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;myvar1&amp;quot;&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;input type=&amp;quot;number&amp;quot; ng-model=&amp;quot;myvar2&amp;quot;&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;br&amp;gt;
    Has introducido: {{myFunc()}}
&amp;lt;/div&amp;gt;
&amp;lt;script src=&amp;quot;Controller.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

//Controler.js
var app = angular.module(&#39;myApp&#39;, []); //en el array van modulos del que esta app tiene Dependencias
app.controler(&#39;myCtrl&#39;, function($scope){
    $scope.myFunc = function(){
        return $scope.myvar1 + &amp;quot; y &amp;quot; + $scope.myvar2;
    }
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2.Expresiones</title>
      <link>/localhost/blog/2015/08/02/2.expresiones</link>
      <pubDate>Sun, 02 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/localhost/blog/2015/08/02/2.expresiones</guid>
      <description>&lt;p&gt;Las expresiones es una forma análoga a ng-bind y son intercambiables. Se definen entre llaves dobles: {{expresión}}&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/01/1.directivas&#34;&gt;1. Directivas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/02/2.expresiones&#34;&gt;2. Expresiones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/03/3.controladores&#34;&gt;3. Controladores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/04/4.filtros&#34;&gt;4. Filtros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/05/5.usandoexternaldata&#34;&gt;5. Usando datos de otro servidor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/06/6.includes&#34;&gt;6. Includes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tal y como lo hemos definido es lo mismo escribir cualquiera de las siguientes líneas:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p ng-bind=&amp;quot;myVar&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{{myVar}}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Algo que no hemos comentado hasta ahora es que se pueden introducir además de variables expresiones, por eso se le llama así, pero en ng-bin también son válidas:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div ng-app=&amp;quot;&amp;quot; ng-init=&amp;quot;num1=5;num2=2;string1=&#39;name&#39;;string2=&#39;surname&#39;; myArr=[1,2,4,5,7] &amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;MyLiteralExpression: {{ 5 + 5 }}&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;MyVarsExpression: {{num1 * num2}}&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;MyStringConcatExpression: {{string1 + &amp;quot; and &amp;quot; +string2}}&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;MyArrExpression: {{miArr[2]}}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>1.Directivas</title>
      <link>/localhost/blog/2015/08/01/1.directivas</link>
      <pubDate>Sat, 01 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/localhost/blog/2015/08/01/1.directivas</guid>
      <description>&lt;p&gt;Las directivas son atributos HTML que empiezan por ng- definidas por AngularJS&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/01/1.directivas&#34;&gt;1. Directivas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/02/2.expresiones&#34;&gt;2. Expresiones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/03/3.controladores&#34;&gt;3. Controladores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/04/4.filtros&#34;&gt;4. Filtros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/05/5.usandoexternaldata&#34;&gt;5. Usando datos de otro servidor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/06/6.includes&#34;&gt;6. Includes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para que las directivas queden definidas lo primero que debemos de hacer es importar AngularJS, lo más sencillo es usar los repositorios de google&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;script src= &amp;quot;http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora podemos usar directivas como las siguientes:
* ng-app = define e inicializa una aplicación de AngularJS
* ng-init = inicializa variables que se usan más tarde
* ng-model = define un atributo como input e iguala los datos a la variable que pongamos tras definirlo
* ng-bind = define un atributo como output y escribe el valor de la variable que pongamos tras definirlo
* ng-repeat = itera por un contenedor y crea tantos elementos como haya en el.
* ng-disabled = si la variable a la que se iguala es true el elemento del DOM queda deshabilitado
* ng-show = si la variable a la que se iguala es true el elemento del DOM es visible
* ng-hide = si la variable a la que se iguala es true el elemento del DOM es invisible
* ng-click = invoca el método al que se iguala&lt;/p&gt;

&lt;p&gt;A continuación podemos ver un ejemplo sencillo de como usarlos y donde definirlos:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div ng-app=&amp;quot;&amp;quot; ng-init=&amp;quot;myIntVar=5;myArray=[&#39;name1&#39;, &#39;name2&#39;, &#39;name3&#39;];myObjectVar={myfield1:&#39;myfield&#39;, myfield2:&#39;otherfield&#39;}&amp;quot;&amp;gt;

    &amp;lt;p&amp;gt; crear variable no incializada:&amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;myNewVar&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt; la nueva variable tiene valor: &amp;lt;span ng-bind=&amp;quot;myNewVar&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt;


    &amp;lt;p&amp;gt; número inicial: &amp;lt;span ng-bind=&amp;quot;myIntVar&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt; introduce otro número: &amp;lt;input type=&amp;quot;number&amp;quot; ng-model=&amp;quot;myIntVar&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt; el nuevo número es: &amp;lt;span ng-bind=&amp;quot;myIntVar&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;


    &amp;lt;ul&amp;gt;
        &amp;lt;li ng-repeat=&amp;quot;x in myArray&amp;quot; ng-bind=&amp;quot;x&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;

    &amp;lt;p&amp;gt;Acceder al campo de un objecto: &amp;lt;span ng-bind=&amp;quot;myObjectVar.myfield1&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;

    &amp;lt;p&amp;gt;
    &amp;lt;input type=&amp;quot;checkbox&amp;quot; ng-model=&amp;quot;mySwitch&amp;quot;&amp;gt;Button &amp;lt;!-- si esta chequeado myswitch es true y el botton estará en gris--&amp;gt;
    &amp;lt;button ng-disabled=&amp;quot;mySwitch&amp;quot;&amp;gt;Click Me!&amp;lt;/button&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;p ng-show=&amp;quot;true&amp;quot;&amp;gt;I am visible.&amp;lt;/p&amp;gt;
    &amp;lt;p ng-show=&amp;quot;false&amp;quot;&amp;gt;I am not visible.&amp;lt;/p&amp;gt;
    &amp;lt;p ng-show=&amp;quot;myVar &amp;gt; 12&amp;quot;&amp;gt;I am visible.&amp;lt;/p&amp;gt;

    &amp;lt;p ng-hide=&amp;quot;true&amp;quot;&amp;gt;I am not visible.&amp;lt;/p&amp;gt;
    &amp;lt;p ng-hide=&amp;quot;false&amp;quot;&amp;gt;I am visible.&amp;lt;/p&amp;gt;
    &amp;lt;p ng-hide=&amp;quot;myVar &amp;gt; 12&amp;quot;&amp;gt;I am not visible.&amp;lt;/p&amp;gt;

    &amp;lt;button ng-click=&amp;quot;method()&amp;quot;&amp;gt;Click Me&amp;lt;/button&amp;gt;
    &amp;lt;button ng-click=&amp;quot;myvar = myvar + 1&amp;quot;&amp;gt;Click Me&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>6.writing config menu</title>
      <link>/localhost/blog/2015/08/01/6.writing-config-menu</link>
      <pubDate>Sat, 01 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/localhost/blog/2015/08/01/6.writing-config-menu</guid>
      <description>

&lt;p&gt;En esta sexta parte vamos a ver como escribir un menu de configuración para el package&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/1.crear-un-package&#34;&gt;1. Estructura de un package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/2.package-en-coffeescript&#34;&gt;2. Ejemplo simple en Coffeescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/3.package-en-javascript&#34;&gt;3. Ejemplo simple en javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/4.atom-api&#34;&gt;4. Atom API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/31/5.writing-test&#34;&gt;5. Writing tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/01/6.writing-config-menu&#34;&gt;6. Writing config menu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cuando abrimos el munú de preferencias de Atom situado en Edit&amp;gt;Preferences podemos ir a la pestaña packages y elegir alguno de ellos para entrar en el menú de preferencias de ese package.&lt;/p&gt;

&lt;p&gt;Para crear estos menus se usa un lenguaje de descripción de los campos. Se pueden definir todos en el archivo .coffe que sea punto de entrada del paquete o ir diversificando cada campo de la configuración entre todos los archivos .coffe.&lt;/p&gt;

&lt;p&gt;Sea cual sea el que se elija se definen justo después de module.exports:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports =
config:
    example:
        title: &#39;Show definition position&#39;
        description: &#39;Choose one: Right, or New&#39;
        type: &#39;string&#39;
        default: &#39;New&#39;
        enum: [&#39;Right&#39;,  &#39;New&#39;]
        order: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;con el código anterior se generará un menu desplegable como el siguiente:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/misuher/myStaticSite/master/content/post/Atom/6.1.png&#34; alt=&#34;checkbox&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Al tener la posibilidad de definirlos en diferentes partes el orden en que aparecerán vendrá definido por el campo &lt;code&gt;order&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Otros tipos que podemos crear son los checkboxes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;example2:
    title: &#39;Environment Overrides Config&#39;
    description: &#39;Use the environment\&#39;s value for GOPATH (if set) instead of the configured value for GOPATH (below)&#39;
    type: &#39;boolean&#39;
    default: true
    order: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/misuher/myStaticSite/master/content/post/Atom/6.2.png&#34; alt=&#34;menu&#34; /&gt;&lt;/p&gt;

&lt;p&gt;también tenemos textfields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;example3:
    title: &#39;Format Arguments&#39;
    description: &#39;`-w` will always be used; you can specify additional arguments for the format tool if desired&#39;
    type: &#39;string&#39;
    default: &#39;-w -e&#39;
    order: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/misuher/myStaticSite/master/content/post/Atom/6.3.png&#34; alt=&#34;textfield&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;como-referenciar-los-valores-obtenidos:93c8705e8bddb16c08d4c3b627ff33ba&#34;&gt;Como referenciar los valores obtenidos&lt;/h2&gt;

&lt;p&gt;Una vez que tenemos un menu de configuración los usuarios ponen diferentes valores, para actuar en base a ellos necesitamos referenciarlos. El API de atom nos da la herramienta para hacerlo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;checkResult = atom.config.get(&#39;firstexample.example&#39;) //true or false
menuResult = atom.config.get(&#39;firstexample.example2&#39;) //string of the item selected
boxResult = atom.config.get(&#39;firstexample.example3&#39;) //string written
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>5.writing test</title>
      <link>/localhost/blog/2015/07/31/5.writing-test</link>
      <pubDate>Fri, 31 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/localhost/blog/2015/07/31/5.writing-test</guid>
      <description>&lt;p&gt;En esta quinta parte vamos a ver como escribir test con jasmine&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/1.crear-un-package&#34;&gt;1. Estructura de un package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/2.package-en-coffeescript&#34;&gt;2. Ejemplo simple en Coffeescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/3.package-en-javascript&#34;&gt;3. Ejemplo simple en javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/4.atom-api&#34;&gt;4. Atom API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/31/5.writing-test&#34;&gt;5. Writing tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/01/6.writing-config-menu&#34;&gt;6. Writing config menu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creamos un archivo dentro de la carpeta /spec que se llame como eel archivo que queremos testear terminado en -spec, en nuestro caso será &lt;code&gt;firstexample-spec.coffe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Dentro de el lo primero sera importar aquel archivo dentro de /lib que queremos testear&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;toTest = require&#39;../lib/firstexample&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora se trata de escribir bloques que comienzan todos por una descripción:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe &amp;quot;testear firstexample&amp;quot;, -&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dentro de este primer test genérico colocaremos un bloque que se ejecuta antes de cada subtest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    beforeEach -&amp;gt;
        workspaceElement = atom.views.getView(atom.workspace)
        activationPromise = atom.packages.activatePackage(&#39;firstexample&#39;)
        editor = atom.workspace.getActiveTextEditor()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora hacemos otro describe para decir que aspecto vamos a testear, dado que firstexample es muy sencillo solo hay una cosa a testear que es que aparezca el texto:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    describe &amp;quot;when the firstexample:convert is triggered&amp;quot;, -&amp;gt;
        it &amp;quot;make appears Hello, World! text on cursor position&amp;quot;, -&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;en este momento es cuando ejecutamos test previos a la ejecución de nuestro comando como por ejemplo que si tenemos una vista no se este mostrando ya y cosas así.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        expect(atom.packages.isPackageLoaded(&#39;firstexample&#39;)).toBe false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Después hay que ejecutar el comando desde el código para lo cual en la API de Atom tenemos una parte de comandos y vemos que dispach hace justo esto:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            atom.commands.dispach workspaceElement, &#39;firstexample:convert&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora vamos a esperar hasta que se active el paquete antes de continuar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            waitsForPromise -&amp;gt;
                activationPromise //definido en el beforeEach
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y por último comprobamos que hemos obtenido lo que queriamos:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            runs -&amp;gt;
                expect(atom.packages.isPackageLoaded(&#39;firstexample&#39;)).toBe true
                options = wordRegex: /[(\w+),\s(\w+)\.]*/
                cursor = editor.getLastCursor()
                range = cursor.getCurrentWordBufferRange(options)
                word = editor.getTextInBufferRange(range)
                expect(word).toEqual &#39;Hello, World!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ya solo queda ejecutar el test con uno de los tres métodos siguientes:x:
        1. Bind &lt;code&gt;cmd-alt-ctrl-p&lt;/code&gt;
        2. Desde el panel de comando con &lt;code&gt;ctrl+alt+p&lt;/code&gt; + &lt;code&gt;window:run package specs&lt;/code&gt;
        3. En los menus superiores elegir View&amp;gt;Developer&amp;gt;Run Package Specs
        4. Desde la linea de comandos &lt;code&gt;apm test&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.Crear un package</title>
      <link>/localhost/blog/2015/07/30/1.crear-un-package</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/localhost/blog/2015/07/30/1.crear-un-package</guid>
      <description>&lt;p&gt;Este es la primera parte de una serie para dar a conocer lo básico referente a la creación de packages para el editor Atom&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/1.crear-un-package&#34;&gt;1. Estructura de un package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/2.package-en-coffeescript&#34;&gt;2. Ejemplo simple en Coffeescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/3.package-en-javascript&#34;&gt;3. Ejemplo simple en javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/4.atom-api&#34;&gt;4. Atom API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/31/5.writing-test&#34;&gt;5. Writing tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/01/6.writing-config-menu&#34;&gt;6. Writing config menu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los packages se pueden desarrollar tanto en Coffeescript como en javascript, aunque la mayoría de los que se pueden encontrar por internet están escritos en Coffeescript.&lt;/p&gt;

&lt;p&gt;Para generar una carpeta con la estructura que debe seguir un paquete, desde el propio Atom lanzamos la paleta de comandos con &lt;code&gt;ctrl+alt+p&lt;/code&gt; y escribimos &lt;strong&gt;generate package&lt;/strong&gt;. nos preguntará la ruta donde queremos generarlo y obtendremos una estructura como la siguiente:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/misuher/myStaticSite/master/content/post/Atom/1.1.png&#34; alt=&#34;skeleton&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Descripción de las carpetas:
*   keymaps = los keybinds de los comandos del package&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;lib = donde residen los modelos y conloadores que extienden el comportamiento de Atom&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;menus = donde se definen los diferentes menus del package en formato JSON&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;node_modules = donde se guardan librerias externas, es autogestionado por Atom al ejecutar el comando en la paleta &lt;strong&gt;Update Package Dependencies:update&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;spec = test del codigo en lib, los archivos se llaman ejemplo-spec.coffe. Para ejecutar los test se usa Jasmine y puede invocarse de 3 formas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Bind &lt;code&gt;cmd-alt-ctrl-p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Desde el panel de comando con &lt;code&gt;ctrl+alt+p&lt;/code&gt; + &lt;code&gt;window:run package specs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;En los menus superiores elegir View&amp;gt;Developer&amp;gt;Run Package Specs&lt;/li&gt;
&lt;li&gt;Desde la linea de comandos &lt;code&gt;apm test&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;styles = carpeta para editar las vistas creadas usando LESS&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;package.json = donde se definen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Entry point&lt;/li&gt;
&lt;li&gt;Dependencias&lt;/li&gt;
&lt;li&gt;Comandos creados por el package&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2.package en Coffeescript</title>
      <link>/localhost/blog/2015/07/30/2.package-en-coffeescript</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/localhost/blog/2015/07/30/2.package-en-coffeescript</guid>
      <description>&lt;p&gt;En esta segunda parte vamos a ver un hello world sencillo en Coffeescript&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/1.crear-un-package&#34;&gt;1. Estructura de un package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/2.package-en-coffeescript&#34;&gt;2. Ejemplo simple en Coffeescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/3.package-en-javascript&#34;&gt;3. Ejemplo simple en javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/30/4.atom-api&#34;&gt;4. Atom API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/07/31/5.writing-test&#34;&gt;5. Writing tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;localhost/blog/localhost/blog/2015/08/01/6.writing-config-menu&#34;&gt;6. Writing config menu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Empezaremos eliminando el contenido de la carpeta lib y creando nuestro propio archivo &lt;code&gt;ejemplo.coffe&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports =
    activate: -&amp;gt;
        atom.commands.add &#39;atom-workspace&#39;, &amp;quot;ascii-art:convert&amp;quot;, =&amp;gt; @convert()

    convert: -&amp;gt;
        editor = atom.workspace.getActivePaneItem()
        editor.insertText(&#39;Hello, World!&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con esto conseguimos vincular nuestro comando &lt;code&gt;firstexample:convert&lt;/code&gt; para que invoque al método convert. Convert obtiene del editor la posicion del cursor y escribe en ella &lt;em&gt;Hello, World!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Para que los cambios sean detectados por Atom ejecutamos la paleta de comandos con &lt;code&gt;ctrl+alt+p&lt;/code&gt; y ejecutamos window:reload. Si volvemos a invocar la paleta de comandos con &lt;code&gt;ctrl+alt+p&lt;/code&gt; y buscamos nuesto comando crado vemos que no es firstexample:convert sino firstexample:toggle.&lt;/p&gt;

&lt;p&gt;Toggle es el comando que viene definido por defecto al crear el pacakge con el generador de Atom. Para decirle a Atom que utilice el nuestro tenemos que editar el archivo &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;activationCommands&amp;quot;: {
    &amp;quot;atom-workspace&amp;quot;: &amp;quot;firstexample:convert&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora si podemos recargar el package e invocar el comando sin problemas.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>